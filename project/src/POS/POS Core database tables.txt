create table public.products (
  id uuid not null default gen_random_uuid (),
  sku character varying(50) not null,
  name character varying(200) not null,
  description text null,
  category_id uuid not null,
  brand character varying(100) null,
  unit_of_measure character varying(20) not null,
  weight numeric(10, 3) null,
  dimensions jsonb null,
  is_prescription_required boolean null default false,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  barcode text null,
  supplier_id uuid null,
  constraint products_pkey primary key (id),
  constraint products_sku_key unique (sku),
  constraint products_category_id_fkey foreign KEY (category_id) references categories (id),
  constraint products_supplier_id_fkey foreign KEY (supplier_id) references suppliers (id)
) TABLESPACE pg_default;

create index IF not exists idx_products_category_id on public.products using btree (category_id) TABLESPACE pg_default;

create index IF not exists idx_products_sku on public.products using btree (sku) TABLESPACE pg_default;

create index IF not exists idx_products_is_active on public.products using btree (is_active) TABLESPACE pg_default;

create trigger audit_products_trigger
after INSERT
or DELETE
or
update on products for EACH row
execute FUNCTION audit_trigger_function ();

create trigger update_products_updated_at BEFORE
update on products for EACH row
execute FUNCTION update_updated_at_column ();


create table public.product_variants (
  id uuid not null default gen_random_uuid (),
  product_id uuid not null,
  sku character varying(50) not null,
  name character varying(200) not null,
  variant_type character varying(50) not null,
  variant_value character varying(100) not null,
  price numeric(10, 2) not null,
  cost numeric(10, 2) null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  stock_quantity integer null default 0,
  minimum_stock integer null default 0,
  maximum_stock integer null,
  pos_pricing_type character varying(20) null default 'fixed'::character varying,
  weight_per_unit numeric(10, 3) null default null::numeric,
  bulk_discount_threshold integer null,
  bulk_discount_percentage numeric(5, 2) null default null::numeric,
  requires_expiry_date boolean null default false,
  requires_batch_tracking boolean null default false,
  is_quick_sale boolean null default false,
  barcode text null,
  expiry_date date null,
  batch_number character varying(50) null,
  constraint product_variants_pkey primary key (id),
  constraint product_variants_sku_key unique (sku),
  constraint product_variants_product_id_fkey foreign KEY (product_id) references products (id) on delete CASCADE,
  constraint chk_product_variants_pos_pricing_type check (
    (
      (pos_pricing_type)::text = any (
        (
          array[
            'fixed'::character varying,
            'weight_based'::character varying,
            'bulk'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_product_variants_product_id on public.product_variants using btree (product_id) TABLESPACE pg_default;

create index IF not exists idx_product_variants_sku on public.product_variants using btree (sku) TABLESPACE pg_default;

create index IF not exists idx_product_variants_is_active on public.product_variants using btree (is_active) TABLESPACE pg_default;

create index IF not exists idx_product_variants_stock_quantity on public.product_variants using btree (stock_quantity) TABLESPACE pg_default;

create index IF not exists idx_product_variants_pos_pricing_type on public.product_variants using btree (pos_pricing_type) TABLESPACE pg_default;

create index IF not exists idx_product_variants_is_quick_sale on public.product_variants using btree (is_quick_sale) TABLESPACE pg_default;

create index IF not exists idx_product_variants_barcode on public.product_variants using btree (barcode) TABLESPACE pg_default;

create trigger audit_product_variants_trigger
after INSERT
or DELETE
or
update on product_variants for EACH row
execute FUNCTION audit_trigger_function ();


create table public.categories (
  id uuid not null default gen_random_uuid (),
  name character varying(100) not null,
  description text null,
  parent_id uuid null,
  sort_order integer null default 0,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  constraint categories_pkey primary key (id),
  constraint categories_parent_id_fkey foreign KEY (parent_id) references categories (id)
) TABLESPACE pg_default;

create index IF not exists idx_categories_parent_id on public.categories using btree (parent_id) TABLESPACE pg_default;

create index IF not exists idx_categories_is_active on public.categories using btree (is_active) TABLESPACE pg_default;

create trigger audit_categories_trigger
after INSERT
or DELETE
or
update on categories for EACH row
execute FUNCTION audit_trigger_function ();


create table public.customers (
  id uuid not null default gen_random_uuid (),
  customer_number character varying(20) not null,
  first_name character varying(100) not null,
  last_name character varying(100) not null,
  email character varying(255) null,
  phone character varying(20) null,
  address text null,
  city character varying(50) null,
  province character varying(50) null,
  customer_type character varying(20) not null default 'regular'::character varying,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  user_id uuid null,
  customer_code character varying(20) null,
  date_of_birth date null,
  registration_date timestamp with time zone null default now(),
  total_spent numeric(12, 2) null default 0.00,
  last_purchase_date timestamp with time zone null,
  loyalty_points integer null default 0,
  loyalty_tier character varying(20) null default 'bronze'::character varying,
  total_lifetime_spent numeric(12, 2) null default 0.00,
  constraint customers_pkey primary key (id),
  constraint customers_customer_code_key unique (customer_code),
  constraint customers_customer_number_key unique (customer_number),
  constraint customers_email_key unique (email),
  constraint customers_user_id_fkey foreign KEY (user_id) references users (id),
  constraint chk_loyalty_tier check (
    (
      (loyalty_tier)::text = any (
        (
          array[
            'bronze'::character varying,
            'silver'::character varying,
            'gold'::character varying,
            'platinum'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint chk_customer_type check (
    (
      (customer_type)::text = any (
        (
          array[
            'regular'::character varying,
            'vip'::character varying,
            'wholesale'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_customers_customer_number on public.customers using btree (customer_number) TABLESPACE pg_default;

create index IF not exists idx_customers_email on public.customers using btree (email) TABLESPACE pg_default;

create index IF not exists idx_customers_phone on public.customers using btree (phone) TABLESPACE pg_default;

create index IF not exists idx_customers_customer_type on public.customers using btree (customer_type) TABLESPACE pg_default;

create index IF not exists idx_customers_customer_code on public.customers using btree (customer_code) TABLESPACE pg_default;

create index IF not exists idx_customers_loyalty_tier on public.customers using btree (loyalty_tier) TABLESPACE pg_default;

create trigger audit_customers_trigger
after INSERT
or DELETE
or
update on customers for EACH row
execute FUNCTION audit_trigger_function ();

create trigger set_customer_code_trigger BEFORE INSERT on customers for EACH row
execute FUNCTION set_customer_code ();

create trigger set_customer_number_trigger BEFORE INSERT on customers for EACH row
execute FUNCTION set_customer_number ();


create table public.pos_sessions (
  id uuid not null default gen_random_uuid (),
  cashier_id uuid not null,
  branch_id uuid null,
  session_number character varying(50) not null,
  opened_at timestamp with time zone not null default now(),
  closed_at timestamp with time zone null,
  starting_cash numeric(10, 2) null default 0.00,
  ending_cash numeric(10, 2) null,
  total_sales numeric(12, 2) null default 0.00,
  total_transactions integer null default 0,
  status character varying(20) not null default 'open'::character varying,
  notes text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint pos_sessions_pkey primary key (id),
  constraint pos_sessions_session_number_key unique (session_number),
  constraint pos_sessions_branch_id_fkey foreign KEY (branch_id) references branches (id),
  constraint pos_sessions_cashier_id_fkey foreign KEY (cashier_id) references users (id),
  constraint chk_pos_session_status check (
    (
      (status)::text = any (
        (
          array[
            'open'::character varying,
            'closed'::character varying,
            'suspended'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_pos_sessions_cashier_id on public.pos_sessions using btree (cashier_id) TABLESPACE pg_default;

create index IF not exists idx_pos_sessions_branch_id on public.pos_sessions using btree (branch_id) TABLESPACE pg_default;

create index IF not exists idx_pos_sessions_status on public.pos_sessions using btree (status) TABLESPACE pg_default;

create index IF not exists idx_pos_sessions_opened_at on public.pos_sessions using btree (opened_at) TABLESPACE pg_default;

create trigger set_pos_session_number_trigger BEFORE INSERT on pos_sessions for EACH row
execute FUNCTION set_pos_session_number ();

create trigger update_pos_sessions_updated_at BEFORE
update on pos_sessions for EACH row
execute FUNCTION update_updated_at_column ();


create table public.pos_payments (
  id uuid not null default gen_random_uuid (),
  transaction_id uuid not null,
  payment_method character varying(20) not null,
  payment_type character varying(50) null,
  amount numeric(10, 2) not null default 0.00,
  change_given numeric(10, 2) not null default 0.00,
  reference_number character varying(100) null,
  payment_status character varying(20) not null default 'pending'::character varying,
  processed_at timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  constraint pos_payments_pkey primary key (id),
  constraint pos_payments_transaction_id_fkey foreign KEY (transaction_id) references pos_transactions (id) on delete CASCADE,
  constraint chk_pos_payment_method check (
    (
      (payment_method)::text = any (
        (
          array[
            'cash'::character varying,
            'digital'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint chk_pos_payment_status check (
    (
      (payment_status)::text = any (
        (
          array[
            'pending'::character varying,
            'completed'::character varying,
            'failed'::character varying,
            'refunded'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_pos_payments_transaction_id on public.pos_payments using btree (transaction_id) TABLESPACE pg_default;

create index IF not exists idx_pos_payments_payment_method on public.pos_payments using btree (payment_method) TABLESPACE pg_default;

create index IF not exists idx_pos_payments_payment_status on public.pos_payments using btree (payment_status) TABLESPACE pg_default;


create table public.pos_audit_logs (
  id uuid not null default gen_random_uuid (),
  session_id uuid null,
  transaction_id uuid null,
  action character varying(100) not null,
  entity_type character varying(50) not null,
  entity_id uuid null,
  old_value text null,
  new_value text null,
  cashier_id uuid null,
  ip_address inet null,
  user_agent text null,
  created_at timestamp with time zone null default now(),
  constraint pos_audit_logs_pkey primary key (id),
  constraint pos_audit_logs_cashier_id_fkey foreign KEY (cashier_id) references users (id),
  constraint pos_audit_logs_session_id_fkey foreign KEY (session_id) references pos_sessions (id),
  constraint pos_audit_logs_transaction_id_fkey foreign KEY (transaction_id) references pos_transactions (id)
) TABLESPACE pg_default;

create index IF not exists idx_pos_audit_logs_session_id on public.pos_audit_logs using btree (session_id) TABLESPACE pg_default;

create index IF not exists idx_pos_audit_logs_transaction_id on public.pos_audit_logs using btree (transaction_id) TABLESPACE pg_default;

create index IF not exists idx_pos_audit_logs_cashier_id on public.pos_audit_logs using btree (cashier_id) TABLESPACE pg_default;

create index IF not exists idx_pos_audit_logs_created_at on public.pos_audit_logs using btree (created_at) TABLESPACE pg_default;

create index IF not exists idx_pos_audit_logs_action on public.pos_audit_logs using btree (action) TABLESPACE pg_default;


create table public.pos_transaction_items (
  id uuid not null default gen_random_uuid (),
  transaction_id uuid not null,
  product_id uuid not null,
  product_name character varying(200) not null,
  product_sku character varying(50) not null,
  quantity numeric(10, 2) not null default 1,
  unit_of_measure character varying(20) not null,
  unit_price numeric(10, 2) not null default 0.00,
  discount_amount numeric(10, 2) not null default 0.00,
  discount_percentage numeric(5, 2) not null default 0.00,
  line_total numeric(10, 2) not null default 0.00,
  weight_kg numeric(10, 3) null,
  expiry_date date null,
  batch_number character varying(50) null,
  created_at timestamp with time zone null default now(),
  constraint pos_transaction_items_pkey primary key (id),
  constraint pos_transaction_items_product_id_fkey foreign KEY (product_id) references products (id),
  constraint pos_transaction_items_transaction_id_fkey foreign KEY (transaction_id) references pos_transactions (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_pos_transaction_items_transaction_id on public.pos_transaction_items using btree (transaction_id) TABLESPACE pg_default;

create index IF not exists idx_pos_transaction_items_product_id on public.pos_transaction_items using btree (product_id) TABLESPACE pg_default;


create table public.pos_transaction_items (
  id uuid not null default gen_random_uuid (),
  transaction_id uuid not null,
  product_id uuid not null,
  product_name character varying(200) not null,
  product_sku character varying(50) not null,
  quantity numeric(10, 2) not null default 1,
  unit_of_measure character varying(20) not null,
  unit_price numeric(10, 2) not null default 0.00,
  discount_amount numeric(10, 2) not null default 0.00,
  discount_percentage numeric(5, 2) not null default 0.00,
  line_total numeric(10, 2) not null default 0.00,
  weight_kg numeric(10, 3) null,
  expiry_date date null,
  batch_number character varying(50) null,
  created_at timestamp with time zone null default now(),
  constraint pos_transaction_items_pkey primary key (id),
  constraint pos_transaction_items_product_id_fkey foreign KEY (product_id) references products (id),
  constraint pos_transaction_items_transaction_id_fkey foreign KEY (transaction_id) references pos_transactions (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_pos_transaction_items_transaction_id on public.pos_transaction_items using btree (transaction_id) TABLESPACE pg_default;

create index IF not exists idx_pos_transaction_items_product_id on public.pos_transaction_items using btree (product_id) TABLESPACE pg_default;


create table public.pos_settings (
  id uuid not null default gen_random_uuid (),
  branch_id uuid null,
  setting_key character varying(100) not null,
  setting_value text null,
  setting_type character varying(20) not null default 'string'::character varying,
  description text null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint pos_settings_pkey primary key (id),
  constraint pos_settings_branch_id_fkey foreign KEY (branch_id) references branches (id),
  constraint chk_pos_setting_type check (
    (
      (setting_type)::text = any (
        (
          array[
            'string'::character varying,
            'number'::character varying,
            'boolean'::character varying,
            'json'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_pos_settings_branch_id on public.pos_settings using btree (branch_id) TABLESPACE pg_default;

create index IF not exists idx_pos_settings_setting_key on public.pos_settings using btree (setting_key) TABLESPACE pg_default;

create index IF not exists idx_pos_settings_is_active on public.pos_settings using btree (is_active) TABLESPACE pg_default;

create trigger update_pos_settings_updated_at BEFORE
update on pos_settings for EACH row
execute FUNCTION update_updated_at_column ();


create table public.sales_transactions (
  id uuid not null default gen_random_uuid (),
  transaction_number character varying(50) not null,
  customer_id uuid null,
  transaction_date timestamp with time zone not null,
  subtotal numeric(10, 2) not null default 0.00,
  tax_amount numeric(10, 2) not null default 0.00,
  total_amount numeric(10, 2) not null default 0.00,
  payment_status character varying(20) not null default 'pending'::character varying,
  created_by_user_id uuid not null,
  branch_id uuid null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  status text null,
  pos_session_id uuid null,
  discount_amount numeric(10, 2) null default 0.00,
  discount_percentage numeric(5, 2) null default 0.00,
  transaction_type character varying(20) null default 'sale'::character varying,
  notes text null,
  constraint sales_transactions_pkey primary key (id),
  constraint sales_transactions_transaction_number_key unique (transaction_number),
  constraint sales_transactions_created_by_user_id_fkey foreign KEY (created_by_user_id) references users (id) on delete CASCADE,
  constraint sales_transactions_customer_id_fkey foreign KEY (customer_id) references customers (id) on delete set null,
  constraint sales_transactions_branch_id_fkey foreign KEY (branch_id) references branches (id) on delete set null,
  constraint sales_transactions_pos_session_id_fkey foreign KEY (pos_session_id) references pos_sessions (id),
  constraint sales_transactions_payment_status_check check (
    (
      (payment_status)::text = any (
        (
          array[
            'pending'::character varying,
            'completed'::character varying,
            'failed'::character varying,
            'refunded'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_enhanced_date on public.sales_transactions using btree (transaction_date) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_enhanced_customer on public.sales_transactions using btree (customer_id) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_enhanced_status on public.sales_transactions using btree (payment_status) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_enhanced_payment_status on public.sales_transactions using btree (payment_status) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_date on public.sales_transactions using btree (transaction_date) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_branch on public.sales_transactions using btree (branch_id) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_user on public.sales_transactions using btree (created_by_user_id) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_status on public.sales_transactions using btree (payment_status) TABLESPACE pg_default;

create index IF not exists idx_sales_transactions_date_branch on public.sales_transactions using btree (transaction_date, branch_id) TABLESPACE pg_default;

create trigger sales_transaction_audit
after INSERT
or DELETE
or
update on sales_transactions for EACH row
execute FUNCTION log_sales_transaction_change ();


create table public.transaction_items (
  id uuid not null default gen_random_uuid (),
  transaction_id uuid not null,
  product_variant_id uuid not null,
  quantity integer not null default 1,
  unit_price numeric(10, 2) not null default 0.00,
  total_price numeric(10, 2) not null default 0.00,
  created_at timestamp with time zone null default now(),
  product_name character varying(200) null,
  product_sku character varying(50) null,
  unit_of_measure character varying(20) null,
  discount_amount numeric(10, 2) null default 0.00,
  discount_percentage numeric(5, 2) null default 0.00,
  weight_kg numeric(10, 3) null,
  expiry_date date null,
  batch_number character varying(50) null,
  constraint transaction_items_pkey primary key (id),
  constraint transaction_items_product_variant_id_fkey foreign KEY (product_variant_id) references product_variants (id) on delete CASCADE,
  constraint transaction_items_transaction_id_fkey foreign KEY (transaction_id) references sales_transactions (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_transaction_items_transaction on public.transaction_items using btree (transaction_id) TABLESPACE pg_default;

create index IF not exists idx_transaction_items_product on public.transaction_items using btree (product_variant_id) TABLESPACE pg_default;


create table public.payments (
  id uuid not null default gen_random_uuid (),
  order_id uuid not null,
  payment_method_id uuid not null,
  amount numeric(12, 2) not null,
  reference_number character varying(100) null,
  status character varying(20) not null default 'pending'::character varying,
  payment_date timestamp with time zone not null default now(),
  processing_fee numeric(10, 2) null default 0,
  notes text null,
  processed_by uuid not null,
  created_at timestamp with time zone null default now(),
  sales_transaction_id uuid null,
  constraint payments_pkey primary key (id),
  constraint payments_payment_method_id_fkey foreign KEY (payment_method_id) references payment_methods (id),
  constraint payments_processed_by_fkey foreign KEY (processed_by) references users (id),
  constraint payments_sales_transaction_id_fkey foreign KEY (sales_transaction_id) references sales_transactions (id),
  constraint chk_payment_status check (
    (
      (status)::text = any (
        (
          array[
            'pending'::character varying,
            'completed'::character varying,
            'failed'::character varying,
            'refunded'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_payments_order_id on public.payments using btree (order_id) TABLESPACE pg_default;

create index IF not exists idx_payments_payment_method_id on public.payments using btree (payment_method_id) TABLESPACE pg_default;

create index IF not exists idx_payments_status on public.payments using btree (status) TABLESPACE pg_default;

create index IF not exists idx_payments_payment_date on public.payments using btree (payment_date) TABLESPACE pg_default;

create index IF not exists idx_payments_processed_by on public.payments using btree (processed_by) TABLESPACE pg_default;

create trigger audit_payments_trigger
after INSERT
or DELETE
or
update on payments for EACH row
execute FUNCTION audit_trigger_function ();

create trigger calculate_processing_fee_trigger BEFORE INSERT
or
update on payments for EACH row
execute FUNCTION calculate_processing_fee ();

create trigger update_order_payment_status_trigger
after INSERT
or DELETE
or
update on payments for EACH row
execute FUNCTION update_order_payment_status ();


create table public.payment_methods (
  id uuid not null default gen_random_uuid (),
  name character varying(50) not null,
  type character varying(20) not null,
  is_active boolean null default true,
  requires_reference boolean null default false,
  processing_fee numeric(5, 4) null default 0,
  created_at timestamp with time zone null default now(),
  constraint payment_methods_pkey primary key (id),
  constraint payment_methods_name_key unique (name),
  constraint chk_payment_type check (
    (
      (type)::text = any (
        (
          array[
            'cash'::character varying,
            'card'::character varying,
            'digital_wallet'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_payment_methods_type on public.payment_methods using btree (type) TABLESPACE pg_default;

create index IF not exists idx_payment_methods_is_active on public.payment_methods using btree (is_active) TABLESPACE pg_default;


create table public.stock_movements (
  id uuid not null default gen_random_uuid (),
  branch_id uuid not null,
  product_variant_id uuid not null,
  movement_type character varying(20) not null,
  quantity numeric(10, 2) not null,
  reference_type character varying(20) not null,
  reference_id uuid null,
  batch_number character varying(50) null,
  expiry_date date null,
  cost numeric(10, 2) null,
  notes text null,
  created_by uuid not null,
  created_at timestamp with time zone null default now(),
  constraint stock_movements_pkey primary key (id),
  constraint stock_movements_branch_id_fkey foreign KEY (branch_id) references branches (id),
  constraint stock_movements_created_by_fkey foreign KEY (created_by) references users (id),
  constraint stock_movements_product_variant_id_fkey foreign KEY (product_variant_id) references product_variants (id),
  constraint chk_movement_type check (
    (
      (movement_type)::text = any (
        (
          array[
            'in'::character varying,
            'out'::character varying,
            'adjustment'::character varying,
            'transfer'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint chk_reference_type check (
    (
      (reference_type)::text = any (
        (
          array[
            'purchase_order'::character varying,
            'order'::character varying,
            'adjustment'::character varying,
            'transfer'::character varying,
            'initial'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_stock_movements_branch_product on public.stock_movements using btree (branch_id, product_variant_id) TABLESPACE pg_default;

create index IF not exists idx_stock_movements_reference on public.stock_movements using btree (reference_type, reference_id) TABLESPACE pg_default;

create index IF not exists idx_stock_movements_created_at on public.stock_movements using btree (created_at) TABLESPACE pg_default;

create trigger update_inventory_levels_trigger
after INSERT on stock_movements for EACH row
execute FUNCTION update_inventory_levels ();


create table public.stock_adjustments (
  id uuid not null default gen_random_uuid (),
  branch_id uuid not null,
  adjustment_date date not null default CURRENT_DATE,
  reason character varying(100) not null,
  status character varying(20) not null default 'draft'::character varying,
  total_value numeric(12, 2) null default 0,
  notes text null,
  created_by uuid not null,
  approved_by uuid null,
  created_at timestamp with time zone null default now(),
  constraint stock_adjustments_pkey primary key (id),
  constraint stock_adjustments_approved_by_fkey foreign KEY (approved_by) references users (id),
  constraint stock_adjustments_branch_id_fkey foreign KEY (branch_id) references branches (id),
  constraint stock_adjustments_created_by_fkey foreign KEY (created_by) references users (id),
  constraint chk_adjustment_status check (
    (
      (status)::text = any (
        (
          array[
            'draft'::character varying,
            'approved'::character varying,
            'cancelled'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_stock_adjustments_branch_id on public.stock_adjustments using btree (branch_id) TABLESPACE pg_default;

create index IF not exists idx_stock_adjustments_status on public.stock_adjustments using btree (status) TABLESPACE pg_default;


create table public.user_roles (
  user_id uuid not null,
  role_id uuid not null,
  assigned_at timestamp with time zone null default now(),
  constraint user_roles_pkey primary key (user_id, role_id),
  constraint user_roles_role_id_fkey foreign KEY (role_id) references roles (id) on delete CASCADE,
  constraint user_roles_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_user_roles_user_id on public.user_roles using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_user_roles_role_id on public.user_roles using btree (role_id) TABLESPACE pg_default;

create index IF not exists idx_user_roles_assigned_at on public.user_roles using btree (assigned_at) TABLESPACE pg_default;


create table public.users (
  id uuid not null default extensions.uuid_generate_v4 (),
  email character varying(255) not null,
  first_name character varying(100) not null,
  last_name character varying(100) not null,
  phone character varying(20) null,
  branch_id uuid null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  last_login timestamp with time zone null,
  last_activity timestamp with time zone null,
  status character varying(20) null default 'offline'::character varying,
  current_session_id uuid null,
  timezone character varying(50) null,
  preferred_language character varying(10) null,
  role character varying(50) null default 'staff'::character varying,
  account_status character varying(20) null default 'active'::character varying,
  mfa_enabled boolean null default false,
  mfa_secret character varying(255) null,
  mfa_backup_codes text null,
  last_password_reset timestamp with time zone null,
  password_reset_token character varying(255) null,
  password_reset_expires timestamp with time zone null,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email),
  constraint users_current_session_id_fkey foreign KEY (current_session_id) references user_sessions (id),
  constraint fk_users_branch_id foreign KEY (branch_id) references branches (id),
  constraint users_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE,
  constraint users_account_status_check check (
    (
      (account_status)::text = any (
        (
          array[
            'active'::character varying,
            'inactive'::character varying,
            'suspended'::character varying,
            'pending'::character varying,
            'invite_sent'::character varying,
            'no_account'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint users_status_check check (
    (
      (status)::text = any (
        (
          array[
            'online'::character varying,
            'away'::character varying,
            'offline'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_users_branch_id on public.users using btree (branch_id) TABLESPACE pg_default;

create index IF not exists idx_users_status on public.users using btree (status) TABLESPACE pg_default;

create index IF not exists idx_users_last_activity on public.users using btree (last_activity) TABLESPACE pg_default;

create trigger audit_users_trigger
after INSERT
or DELETE
or
update on users for EACH row
execute FUNCTION audit_trigger_function ();

create trigger update_users_updated_at BEFORE
update on users for EACH row
execute FUNCTION update_updated_at_column ();



create table public.pos_transactions (
  id uuid not null default gen_random_uuid (),
  transaction_number character varying(50) not null,
  pos_session_id uuid not null,
  customer_id uuid null,
  cashier_id uuid not null,
  branch_id uuid null,
  transaction_date timestamp with time zone not null default now(),
  transaction_type character varying(20) not null default 'sale'::character varying,
  subtotal numeric(10, 2) not null default 0.00,
  discount_amount numeric(10, 2) not null default 0.00,
  discount_percentage numeric(5, 2) not null default 0.00,
  tax_amount numeric(10, 2) not null default 0.00,
  total_amount numeric(10, 2) not null default 0.00,
  payment_status character varying(20) not null default 'pending'::character varying,
  status character varying(20) not null default 'active'::character varying,
  notes text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint pos_transactions_pkey primary key (id),
  constraint pos_transactions_transaction_number_key unique (transaction_number),
  constraint pos_transactions_cashier_id_fkey foreign KEY (cashier_id) references users (id),
  constraint pos_transactions_branch_id_fkey foreign KEY (branch_id) references branches (id),
  constraint pos_transactions_customer_id_fkey foreign KEY (customer_id) references customers (id),
  constraint pos_transactions_pos_session_id_fkey foreign KEY (pos_session_id) references pos_sessions (id),
  constraint chk_pos_transaction_type check (
    (
      (transaction_type)::text = any (
        (
          array[
            'sale'::character varying,
            'return'::character varying,
            'exchange'::character varying,
            'void'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint chk_pos_payment_status check (
    (
      (payment_status)::text = any (
        (
          array[
            'pending'::character varying,
            'completed'::character varying,
            'failed'::character varying,
            'refunded'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint chk_pos_transaction_status check (
    (
      (status)::text = any (
        (
          array[
            'active'::character varying,
            'void'::character varying,
            'returned'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_pos_transactions_pos_session_id on public.pos_transactions using btree (pos_session_id) TABLESPACE pg_default;

create index IF not exists idx_pos_transactions_customer_id on public.pos_transactions using btree (customer_id) TABLESPACE pg_default;

create index IF not exists idx_pos_transactions_cashier_id on public.pos_transactions using btree (cashier_id) TABLESPACE pg_default;

create index IF not exists idx_pos_transactions_transaction_date on public.pos_transactions using btree (transaction_date) TABLESPACE pg_default;

create index IF not exists idx_pos_transactions_payment_status on public.pos_transactions using btree (payment_status) TABLESPACE pg_default;

create index IF not exists idx_pos_transactions_status on public.pos_transactions using btree (status) TABLESPACE pg_default;

create trigger set_pos_transaction_number_trigger BEFORE INSERT on pos_transactions for EACH row
execute FUNCTION set_pos_transaction_number ();

create trigger update_pos_transactions_updated_at BEFORE
update on pos_transactions for EACH row
execute FUNCTION update_updated_at_column ();


create table public.branches (
  id uuid not null default gen_random_uuid (),
  name character varying(100) not null,
  code character varying(10) not null,
  address text not null,
  city character varying(50) not null,
  province character varying(50) not null,
  postal_code character varying(10) null,
  phone character varying(20) null,
  email character varying(255) null,
  manager_id uuid null,
  is_active boolean null default true,
  operating_hours jsonb null,
  created_at timestamp with time zone null default now(),
  branch_type character varying(20) null default 'satellite'::character varying,
  constraint branches_pkey primary key (id),
  constraint branches_code_key unique (code),
  constraint branches_manager_id_fkey foreign KEY (manager_id) references users (id),
  constraint branches_branch_type_check check (
    (
      (branch_type)::text = any (
        (
          array[
            'main'::character varying,
            'satellite'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_branches_code on public.branches using btree (code) TABLESPACE pg_default;

create index IF not exists idx_branches_is_active on public.branches using btree (is_active) TABLESPACE pg_default;

create trigger audit_branches_trigger
after INSERT
or DELETE
or
update on branches for EACH row
execute FUNCTION audit_trigger_function ();


create table public.branches (
  id uuid not null default gen_random_uuid (),
  name character varying(100) not null,
  code character varying(10) not null,
  address text not null,
  city character varying(50) not null,
  province character varying(50) not null,
  postal_code character varying(10) null,
  phone character varying(20) null,
  email character varying(255) null,
  manager_id uuid null,
  is_active boolean null default true,
  operating_hours jsonb null,
  created_at timestamp with time zone null default now(),
  branch_type character varying(20) null default 'satellite'::character varying,
  constraint branches_pkey primary key (id),
  constraint branches_code_key unique (code),
  constraint branches_manager_id_fkey foreign KEY (manager_id) references users (id),
  constraint branches_branch_type_check check (
    (
      (branch_type)::text = any (
        (
          array[
            'main'::character varying,
            'satellite'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_branches_code on public.branches using btree (code) TABLESPACE pg_default;

create index IF not exists idx_branches_is_active on public.branches using btree (is_active) TABLESPACE pg_default;

create trigger audit_branches_trigger
after INSERT
or DELETE
or
update on branches for EACH row
execute FUNCTION audit_trigger_function ();


create table public.roles (
  id uuid not null default gen_random_uuid (),
  name character varying(50) not null,
  description text null,
  is_active boolean null default false,
  created_at timestamp with time zone null default now(),
  display_name text null,
  is_system_role boolean null default false,
  updated_at timestamp with time zone null default now(),
  constraint roles_pkey primary key (id),
  constraint roles_name_key unique (name),
  constraint roles_name_unique unique (name)
) TABLESPACE pg_default;

create index IF not exists idx_roles_is_system_role on public.roles using btree (is_system_role) TABLESPACE pg_default;

create index IF not exists idx_roles_created_at on public.roles using btree (created_at) TABLESPACE pg_default;


create table public.user_sessions (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  session_token character varying(255) not null,
  ip_address inet null,
  user_agent text null,
  device_info jsonb null,
  location_info jsonb null,
  current_page character varying(500) null,
  status character varying(20) null default 'active'::character varying,
  last_activity timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  expires_at timestamp with time zone not null,
  updated_at timestamp with time zone null default now(),
  is_active boolean null default true,
  constraint user_sessions_pkey primary key (id),
  constraint user_sessions_session_token_key unique (session_token),
  constraint user_sessions_token_unique unique (session_token),
  constraint user_sessions_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE,
  constraint user_sessions_status_check check (
    (
      (status)::text = any (
        (
          array[
            'active'::character varying,
            'away'::character varying,
            'inactive'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_user_sessions_active on public.user_sessions using btree (is_active) TABLESPACE pg_default;

create index IF not exists idx_user_sessions_expires on public.user_sessions using btree (expires_at) TABLESPACE pg_default;

create index IF not exists idx_user_sessions_user_id on public.user_sessions using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_user_sessions_status on public.user_sessions using btree (status) TABLESPACE pg_default;

create index IF not exists idx_user_sessions_last_activity on public.user_sessions using btree (last_activity) TABLESPACE pg_default;

create index IF not exists idx_user_sessions_expires_at on public.user_sessions using btree (expires_at) TABLESPACE pg_default;

