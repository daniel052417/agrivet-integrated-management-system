create table public.promotions (
  id uuid not null default gen_random_uuid (),
  title text not null,
  description text not null,
  start_date date not null,
  end_date date not null,
  discount_type text not null,
  discount_value numeric(10, 2) not null,
  products jsonb null default '[]'::jsonb,
  categories jsonb null default '[]'::jsonb,
  show_on_pwa boolean null default true,
  show_on_facebook boolean null default false,
  status text null default 'upcoming'::text,
  max_uses integer null,
  total_uses integer null default 0,
  created_by uuid null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint promotions_pkey primary key (id),
  constraint promotions_created_by_fkey foreign KEY (created_by) references auth.users (id) on delete set null,
  constraint promotions_discount_value_check check ((discount_value > (0)::numeric)),
  constraint promotions_status_check check (
    (
      status = any (
        array['active'::text, 'upcoming'::text, 'expired'::text]
      )
    )
  ),
  constraint promotions_total_uses_check check ((total_uses >= 0)),
  constraint promotions_max_uses_check check (
    (
      (max_uses is null)
      or (max_uses > 0)
    )
  ),
  constraint promotions_discount_type_check check (
    (
      discount_type = any (array['flat'::text, 'percent'::text])
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_promotions_status on public.promotions using btree (status) TABLESPACE pg_default;

create index IF not exists idx_promotions_dates on public.promotions using btree (start_date, end_date) TABLESPACE pg_default;

create index IF not exists idx_promotions_pwa on public.promotions using btree (show_on_pwa) TABLESPACE pg_default
where
  (show_on_pwa = true);

create index IF not exists idx_promotions_facebook on public.promotions using btree (show_on_facebook) TABLESPACE pg_default
where
  (show_on_facebook = true);

create index IF not exists idx_promotions_created_by on public.promotions using btree (created_by) TABLESPACE pg_default;

create trigger update_promotion_status_trigger BEFORE INSERT
or
update on promotions for EACH row
execute FUNCTION update_promotion_status ();

create trigger update_promotions_updated_at BEFORE
update on promotions for EACH row
execute FUNCTION update_updated_at_column ();


-- Table: promotion_analytics
CREATE TABLE IF NOT EXISTS public.promotion_analytics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  promotion_id UUID REFERENCES public.promotions(id) ON DELETE CASCADE,
  view_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  click_date TIMESTAMP WITH TIME ZONE,
  user_agent TEXT,
  ip_address INET,
  referrer TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table: promotion_views
CREATE TABLE IF NOT EXISTS public.promotion_views (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  promotion_id UUID REFERENCES public.promotions(id) ON DELETE CASCADE,
  viewed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id UUID,                -- Use UUID if referencing users(id)
  session_id VARCHAR(100),     -- For anonymous or guest tracking
  device_type VARCHAR(20),     -- 'mobile', 'desktop', 'tablet'
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
